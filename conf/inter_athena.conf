//--------------------------------------------------------------
// rAthena 内部通讯配置文件
//--------------------------------------------------------------
// 这个配置文件会被登录服务器、角色服务器以及地图服务器读取. 
//--------------------------------------------------------------

// 是否记录内部通讯日志? 
// 这个选项启用后, 当一个公会被创建、被解散、占领新城池时
// 都会往char_server_db选项所指向的数据库中的interlog表写入
// 日志信息, 除此之外并不会记录其他的东西. 
log_inter: 1

// 内部通讯日志文件名
// 这个选项已经被rAthena弃用
// 代码中根本没有任何地方使用到此选项
// 大家请无视他, 避免浪费表情了
inter_log_filename: log/inter.log

// 玩家之间组队均分经验的等级限制
// 默认情况下, 队伍中级别最高的人和最低的人之间相差等级不能超过15级
// 否则就无法开启经验均分选项
party_share_level: 15

// 您可以为MySQL的表指定特殊的编码. 
// 注意: 这个特性只有在MySQL版本在4.1及更新的版本中才支持. 
//
// rAthenaCN 特性支持
// ------------------
// 内码表自动判定机制
// 若设置为 auto 则会根据数据库的字符集自动选用内码表
// 1、当数据库为 utf8 字符集时
//    - 若服务器是简体中文系统, 则自动使用 gbk 内码表与数据库通信
//    - 非简体中文系统, 则使用默认内码表与数据库通信
// 2、当数据库为 latin1 字符集时, 自动使用 latin1 内码表与数据库通信
// 3、当数据库为 gbk 字符集时, 自动使用 gbk 内码表与数据库通信
// 4、当数据库为 big5 字符集时, 自动使用 big5 内码表与数据库通信
//
// 下方的 login_codepage、ipban_codepage、log_codepage 选项与此选项同理
default_codepage: auto

// 接下来涉及到的几个数据库服务器的IP设置中, 若您的数据库服务器就是运行rAthena
// 的同一台机器的话, 那么请注意以下几点建议: 
// 
// 1、如果您将rAthena运行于Linux系统, 那么对Linux来说理想情况下IP地址应该
//    使用localhost而不是127.0.0.1
// 
// 2、如果您将rAthena运行于Windows系统, 那么建议将IP地址设置为127.0.0.1
// 
// 如果您在Linux系统下碰到类似"Can't connect to local MySQL server through 
// socket '/tmp/mysql.sock' (2)"的提示, 那么请果断将localhost改成127.0.0.1

// 全局数据库配置

// 登录服务器的 MySQL 连接配置信息
// 注意: login_server_ip 如果是域名, 那么禁止超过63个字符(包括标点符号)
login_server_ip: 127.0.0.1
login_server_port: 3306
login_server_id: rAthenaCN
login_server_pw: rAthenaCN123
login_server_db: rathenacn_main
login_codepage: auto
login_case_sensitive: no

// 注意: ipban_db_ip 如果是域名, 那么禁止超过63个字符(包括标点符号)
ipban_db_ip: 127.0.0.1
ipban_db_port: 3306
ipban_db_id: rAthenaCN
ipban_db_pw: rAthenaCN123
ipban_db_db: rathenacn_main
ipban_codepage: auto

// 角色服务器的 MySQL 连接配置信息
// 注意: char_server_ip 如果是域名, 那么禁止超过63个字符(包括标点符号)
char_server_ip: 127.0.0.1
char_server_port: 3306
char_server_id: rAthenaCN
char_server_pw: rAthenaCN123
char_server_db: rathenacn_main

// 地图服务器的 MySQL 连接配置信息
// 注意: map_server_ip 如果是域名, 那么禁止超过63个字符(包括标点符号)
map_server_ip: 127.0.0.1
map_server_port: 3306
map_server_id: rAthenaCN
map_server_pw: rAthenaCN123
map_server_db: rathenacn_main

// 日志数据库的 MySQL 连接配置信息
// 注意: log_db_ip 如果是域名, 那么禁止超过63个字符(包括标点符号)
log_db_ip: 127.0.0.1
log_db_port: 3306
log_db_id: rAthenaCN
log_db_pw: rAthenaCN123
log_db_db: rathenacn_logs
log_codepage: auto
log_login_db: loginlog

// MySQL掉线重连策略设置
// 如果由于某些原因导致rAthena和MySQL数据库服务器断开连接, 那么会
// 按照下面配置的方式来尝试重新连接
// 
// 若mysql_reconnect_type被设置为 1 时: 
//     那么当rAthena断开和数据库服务器的连接后, rAthena会尝试重连数据库
//     服务器, 如果尝试了mysql_reconnect_count所指定的次数后还是失败, 
//     那么rAthena的相关服务将自行关闭
// 
// 若mysql_reconnect_type被设置为 2 时(默认): 
//     那么当rAthena断开和数据库服务器的连接后, rAthena会无限次尝试
//     重连数据库
mysql_reconnect_type: 2
mysql_reconnect_count: 1

// 请不要改变接下来的这些设置, 除非您对数据库非常的了解, 并且知道自己在
// 做什么事情. 如果没有充分的理由建议您保持默认, 不要去修改他们

// 配置在 MySQL 数据库中所有表的名称

// 登录服务器相关的数据库表名配置
login_server_account_db: login
ipban_table: ipbanlist

// 服务器之间共享的数据库表名配置
global_acc_reg_num_table: global_acc_reg_num
global_acc_reg_str_table: global_acc_reg_str

// 角色服务器相关的数据库表名配置
char_db: char
hotkey_db: hotkey
scdata_db: sc_data
cart_db: cart_inventory
inventory_db: inventory
charlog_db: charlog
skill_db: skill
interlog_db: interlog
memo_db: memo
guild_db: guild
guild_alliance_db: guild_alliance
guild_castle_db: guild_castle
guild_expulsion_db: guild_expulsion
guild_member_db: guild_member
guild_skill_db: guild_skill
guild_position_db: guild_position
guild_storage_db: guild_storage
party_db: party
pet_db: pet
friend_db: friends
mail_db: mail
mail_attachment_db: mail_attachments
auction_db: auction
quest_db: quest
homunculus_db: homunculus
skill_homunculus_db: skill_homunculus
mercenary_db: mercenary
mercenary_owner_db: mercenary_owner
elemental_db: elemental
ragsrvinfo_db: ragsrvinfo
skillcooldown_db: skillcooldown
bonus_script_db: bonus_script
acc_reg_num_table: acc_reg_num
acc_reg_str_table: acc_reg_str
char_reg_str_table: char_reg_str
char_reg_num_table: char_reg_num
clan_table: clan
clan_alliance_table: clan_alliance

// 地图服务器相关的数据库表名配置
buyingstore_table: buyingstores
buyingstore_items_table: buyingstore_items
item_table: item_db
renewal-item_table: item_db_re
item2_table: item_db2
renewal-item2_table: item_db2_re
item_cash_table: item_cash_db
item_cash2_table: item_cash_db2
mob_table: mob_db
renewal-mob_table: mob_db_re
mob2_table: mob_db2
renewal-mob2_table: mob_db2_re
mob_skill_table: mob_skill_db
renewal-mob_skill_table: mob_skill_db_re
mob_skill2_table: mob_skill_db2
renewal-mob_skill2_table: mob_skill_db2_re
mapreg_table: mapreg
sales_table: sales
vending_table: vendings
vending_items_table: vending_items
market_table: market
roulette_table: db_roulette

// 是否让地图服务器加载 SQL 版本的 item_db, mob_db 以及 mob_skill_db? (yes/no)
// 若改成yes的话, 地图服务器将不会再加载db目录中的item_db.txt、
// mob_db.txt 及 mob_skill_db.txt 而是转而加载这些文件在数据库中对应的表
// 
// 将此选项改成yes之前, 您还需要先往map_server_db选项所指向的数据库中
// 导入下面的SQL脚本文件, 否则map-server将找不到物品和魔物等数据: 
// 
// 无论复兴前后的版本, 请导入 sql-files\item_cash_db.sql
// 无论复兴前后的版本, 请导入 sql-files\item_cash_db2.sql
// 复兴前的版本, 请导入 sql-files\item_db.sql       复兴后请导入 sql-files\item_db_re.sql
// 复兴前的版本, 请导入 sql-files\item_db2.sql      复兴后请导入 sql-files\item_db2_re.sql
// 复兴前的版本, 请导入 sql-files\mob_db.sql        复兴后请导入 sql-files\mob_db_re.sql
// 复兴前的版本, 请导入 sql-files\mob_db2.sql       复兴后请导入 sql-files\mob_db2_re.sql
// 复兴前的版本, 请导入 sql-files\mob_skill_db.sql  复兴后请导入 sql-files\mob_skill_db_re.sql
// 复兴前的版本, 请导入 sql-files\mob_skill_db2.sql 复兴后请导入 sql-files\mob_skill_db2_re.sql
// 
// 导入之后, 也就意味着item_db等信息都已经被搬入到SQL数据库中了, 
// 以后您想再修改item_db等信息时, 将不再是修改db\[pre-]re\item_db.txt文件了
// 而是去SQL数据库中直接更新对应的表
use_sql_db: no

inter_server_conf: inter_server.yml

import: conf/import/inter_conf.txt
