//--------------------------------------------------------------
// rAthena 登录服务器配置文件
// 本配置文件由 Peter Kieser <pfak@telus.net> 翻译成英文
//--------------------------------------------------------------
// 提示: 此配置文件中, 只要是以//作为开头的行, 都是注释信息. 
// 注释信息您可以随意修改, 都不会干扰服务器的正常运行. 
//--------------------------------------------------------------

// 登录服务器会监听来自这个IP地址的网卡信息
// 注意: 该选项允许你在有多个公网网卡(也意味着有多个公网IP)的机器上, 
//       使用相同的“登录服务器端口”来开多个服. 
// 提醒: 若您想启用bind_ip选项的话, 记得去掉bind_ip前面的注释符//, 否则
//       服务器会忽略它, 导致配了和没配一样. 
//bind_ip: 127.0.0.1
 
// 登录服务器端口
login_port: 6900

// 往控制台窗口(俗称:黑框)中输出内容时, 在每行信息的前面加上时间戳. 
// 最大长度不能超过20个字符. 
// 常用的格式有:
//   %I:%M:%S %p (小时:分钟:秒数 12小时制, 会携带AM或PM标记)
//   %H:%M:%S (小时:分钟:秒数, 24小时制)
//   %d/%b/%Y (日期/月份/年份)
// 更多的格式信息, 请参考C语言的strftime函数用法. 
// 
// rAthena官方默认值是 [%d/%b %H:%M] 也就是24小时制的 [日/月 时:分]
// 不过这明显不符合国人习惯, 为此rAthenaCN将其默认值改成了 [%Y/%m/%d %H:%M] 
// 
// 若想启用时间戳的话, 请将下面这一行头部的注释符//去掉
//timestamp_format: [%Y/%m/%d %H:%M] 

// 当终端被一些加载器打开从而导致输出信息被重定向时, 
// 是否也将颜色代码一同输出? 
// 
// 问: 什么是重定向? 
// 答: 原本登录服务器的信息将直接显示到自己的黑框, 不过若使用一些启动工具
//     来启动登录服务器的话, 原本应该显示到黑框的信息被显示到了启动工具里面的
//     一个列表之类, 这种情况称之为“输出信息被重定向了”! 
// 
// 问: 什么是颜色代码? 
// 答: 在我们使用黑框的过程中, 会发现类似[Status]的字是绿色的, 
//     而[Error]是红色的. 这是因为在程序往黑框输出信息时, 加入了一些
//     颜色编码, 比如若使用颜色编码“\033[1;31m”那么则表示接下来的字用红色输出
//     其实有点类似我们脚本中使用的^xxxxxx颜色代码. 
// 
// 此选项一般情况下推荐关闭
stdout_with_ansisequence: no

// 记录登录服务器黑框中产生的部分信息到/log/目录中
// 首先您要确保rAthena的目录中有一个log文件夹, 没有的话必须手动创建, 
// 否则日志文件将不会产生. 
// 1: 记录黑框中以  [Warning] 开头的警告信息
// 2: 记录黑框中以  [Error]   开头的错误信息和数据库错误信息
// 4: 记录黑框中以  [Debug]   开头的调试信息
// 例如: 想要记录[Warning]、[Error]、[Debug]开头的信息, 
//       只需要将1、2、4相加, 将 console_msg_log 设置为7即可(1+2+4=7)! 
// 
// 日志信息的记录, 并不会被 console_silent 选项影响
// 也就是说, 假如 console_msg_log 设置为 2 想记录 [Error] 信息, 而
// 在 console_silent 中设置为 16 想隐藏 [Error] 信息, 此时系统
// 将会隐藏[Error]信息, 与此同时记录[Error]信息
console_msg_log: 7

// 将登录服务器黑框中产生的要记录的信息, 写到下面指定的日志文件中
console_log_filepath: ./log/login-msg_log.log

// 选择性隐藏登录服务器黑框中显示出来的一些提示信息: 
// 1:  隐藏黑框中以  [Info]    开头的提示信息
// 2:  隐藏黑框中以  [Status]  开头的状态信息
// 4:  隐藏黑框中以  [Notice]  开头的注意信息
// 8:  隐藏黑框中以  [Warning] 开头的警告信息
// 16: 隐藏黑框中以  [Error]   开头的错误信息和数据库错误信息
// 32: 隐藏黑框中以  [Debug]   开头的调试信息
// 若您想同时隐藏多种信息, 只需要将其对应的数字相加即可
// 例如: 若您想要隐藏[Info]、[Status]、[Notice]开头的信息, 
//       那么只需要将1、2、4相加, 填写7即可(1+2+4=7)! 
console_silent: 0

// 是否启用终端指令
// 开启终端指令后, 您可以在login-server的黑框中输入命令
// 在登录服务器的黑框中输入help然后回车, 可以查看终端指令说明
// 比如输入server:reloadconf可以让登录服务器重新读取相关的配置文件
// 还能输入"create:用户名 密码 性别"（不含引号）来直接创建一个新账号
// 想要启用这个功能的话, 请将下面的值改成on即可
// 请避免在登录服务器中使用 >& 日志文件.log 这样的输出指令
console: off

// 是否允许使用 _M/_F 的方式来注册新账号? 
new_account: yes

// 若您将new_account设置为yes的话
// 那么是否要求新建的账号和密码的长度都必须大于等于4个字符? 
// 在一般情况下推荐设置为yes, 除非您在Diff客户端的时候
// 启用了'Disable 4 LetterUserID/Password'选项, 那么可以设置为no
new_acc_length_limit: yes

// 账号注册洪水攻击防护机制
// 
// 问: 什么是账号注册洪水攻击? 
// 答: 专门编写一些程序, 在短时间内注册成千上万个账号, 这就是账号注册洪水攻击. 
// 
// Sola丶小克: 
// 我查了一下代码, 这一块 rAthena 代码写的有点问题, 以后找时间修改.
// 问题在于设定为10秒中内允许1个账号, 而实际上在10秒钟内第 1 和第 2 个账号
// 能注册成功, 但第 3 个账号就会由于这个防护机制而注册失败. 验证于: 2015年7月4日21:54:14
// 
// 在 time_allowed 限定的时间内, 最多允许注册几个账号? 
allowed_regs: 1
// 下面的选项写10的话(秒), 那么说明10秒中内最多只能注册 allowed_regs 个账号
time_allowed: 10

// 日志文件名
// 和登录服务器相关的操作都会被记录到这个文件中
// 
// 这个选项已经被rAthena弃用
// 代码中根本没有任何地方使用到此选项
// 大家请无视他, 避免浪费表情了
login_log_filename: log/login.log

// 是否记录登录服务器产生的日志
// 日志内容包括: 
//   登录服务器启动时记录日志
//   登录服务器关闭时记录日志
//   某个用户的鼠标密码验证失败时记录日志
//   某个用户登录成功
//   某个用户登录失败
//   角色服务器和登录服务器建立了连接
//   某个被加入黑名单的IP地址对登录服务器发起连接请求
// 
// 日志信息默认情况下, 记录在日志数据库的loginlog表中
// 设置为1则表示记录日志(默认), 设置为0则表示不记录日志
log_login: yes

// 登录服务器在显示时间的时候, 用什么格式显示? 
// 
// 这个字段被使用的地方其实比较有限, 目前找到下面两个: 
// 1、当玩家登录时如果这个账号已经被封禁, 
//    那么会在登录服务器的黑框中显示出一个日期, 这个日期就遵循下面的格式. 
// 2、当角色服务器请求登录服务器封禁一个账号时, 
//    在登录服务器的黑框中也会显示出一个提示信息, 这个日期也会遵循下面的格式. 
date_format: %Y-%m-%d %H:%M:%S

// 仅 group_id 为“等于”指定数字的账号才能登录到服务器
// 假如您填写的数字是 99 那么表示只有 group_id 等于 99 的账号才能登录到服务器
// 其他账号登入时则会提示服务器正在维护, 无法登录
// 
// 填写 -1 表示关闭此机制(默认)
// 填写 0或其他大于0的数 表示仅 group_id 为指定数值的账号可登陆
group_id_to_connect: -1

// 仅 group_id 为“大于等于”指定数字的账号才能登录到服务器
// 假如您填写的数字是 10 那么表示只有 group_id 大于等于 10 的账号才能登录到服务器
// 其他账号登入时则会提示服务器正在维护, 无法登录
// 
// 注意: 如果 group_id_to_connect 的值不是-1的话, 那么此开关无效
// 填写 -1 表示关闭此机制(默认)
// 填写 0或其他大于0的数 表示仅 group_id 大于等于指定数值的账号可登陆
min_group_id_to_connect: -1

// 哪个group_id将被指定为VIP玩家组(即: VIP玩家组别)? 
// 默认值为: 5
// 当一个玩家被提升到VIP玩家组时, 那么他的group_id会从默认的0变成5
vip_group: 5

// 普通账号允许建立几个角色? 
// 
// 提示: 此选项因在 rAthena 的默认定义下难以理解, 而被 rAthenaCN 改造.
// 完成改造之后, 此选项的效果与 rAthena 官方不一样(可能和其他服务端也不一样),
// 所以请不要在未了解清楚的情况下, 将 rAthena 或其他服务端的此选项的值, 粘贴到此选项中来使用.
//
// 在未开启VIP会员系统的情况下, 不会区分普通账号和VIP账号.
// 在这种情况下, 此选项实际上控制的是“所有账号”.
//
// 设定的数值不能超过 9, 如果超过的话将会被默认设置为 9.
// 设定的数值若小于或等于 0, 那么在未开启VIP会员系统的情况下, 默认值为 9. 开启了VIP会员系统的情况下, 默认值为 3.
//
// 在启用VIP会员系统的情况下, chars_per_account 加上 vip_char_increase 不能大于 9,
// 否则登陆服务器启动时候会将 vip_char_increase 自动设置为 9 减去 chars_per_account 的值.
// 
// 注意: rAthenaCN 默认不启用VIP会员系统, 想要开启的话请前往官网进行免费定制.
chars_per_account: 0

// VIP 账号允许比普通账号多建立几个角色?
// 
// 注意: 此选项仅在启用VIP会员系统情况下才有效, rAthenaCN 默认不启用VIP会员系统,
// 想要开启的话请前往官网进行免费定制.
// 
// 此选项能够设置的上限为 9 减去 chars_per_account 的值.
// 
// 默认值为: 0 (表示关闭此机制)
vip_char_increase: 0

// 刚创建的账号有多长的游戏时间? 
// 若设置为 -1 表示新建的账号拥有无限的游戏时间(默认)
// 若设置为 0 或者其他数字, 则表示新账号将在指定的秒数之后过期
// 
// 当过期时间到了之后, 这个玩家若在线, 则会被强制下线, 并无法再登录
// 除非完成续期操作, 才能重新进入游戏. 
start_limited_time: -1

// 是否检查客户端 clientinfo.xml 中配置的 version 字段? 
check_client_version: no

// 当启用了 check_client_version 的话
// 那么只有 version 等于多少的客户端才允许连接? 
client_version_to_connect: 20

// 在数据库的 login 表中保存密码时, 是否使用MD5哈希密码? 
// 提示: 当客户端使用 <passwordencrypt> 机制的话, 此功能不可用. 
// Sola丶小克: 我不知道 <passwordencrypt> 机制是个什么东西, 若您知道的话, 望不吝赐教, 感谢! 
// 
// 若你之前使用 no 选项, 现在想修改成 yes 的话, 需要在主数据库中执行以下查询语句:
// UPDATE `login` SET `user_pass`=MD5(`user_pass`);
// 否则修改此选项之前注册的账号将无法正常登录. (感谢"好刀一把"建议).
use_MD5_passwords: no

// IP地址黑名单功能
ipban_enable: yes
// 当密码重试超过指定次数时, 将IP加入黑名单
ipban_dynamic_pass_failure_ban: yes
// 在几分钟内密码重试次数超过限制时, 加入黑名单? (默认5次)
ipban_dynamic_pass_failure_ban_interval: 5
// 当密码重试次数达到多少次之后, 认为超过限制? (默认7次)
ipban_dynamic_pass_failure_ban_limit: 7
// 将IP加入黑名单后, 封禁多长时间(以分钟为单位)? (默认5分钟)
ipban_dynamic_pass_failure_ban_duration: 5
// 每间隔多长时间自动清理过了封禁期的IP地址? 0 = 不清理. 默认值为 60.
// 提示: 如果设置为不清理, 那么过了封禁期的IP地址将会在登录服务器启动和退出时被清空. 
// 玩家的IP地址虽然还在黑名单列表中, 不过由于已经过了封禁期, 所以玩家可以正常登录. 
ipban_cleanup_interval: 60

// 间隔多长时间(分钟)进行一次DNS/IP更新? (此功能默认关闭)
// 若您的服务器使用的是动态IP地址, 且每过一段时间IP地址会自动变化的话, 请启用此选项. 
//ip_sync_interval: 10

// DNS封禁黑名单机制
// 若启用此机制, 任何连接请求都会先检查对方是否在黑名单中, 若在黑名单中则禁止连接
// 
// 问: 为什么叫“DNS封禁黑名单”? 
// 答: 因为系统用来判定对方是否在黑名单中的根据, 是将IP地址组成一个域名, 然后看看
//     这个域名是否已经被DNS服务器所解析, 若是, 则认为对方在黑名单中. 
// 
// 问: 具体的工作机制是什么样的? 
// 答: 当一个服务器收到连接请求时, 会先获得对方的IP地址, 比如127.0.0.1, 然后将这个
//     IP地址反序, 变成1.0.0.127, 然后拼接上 dnsbl_servers 所指定的DNS服务器, 比如
//     若和 bl.blocklist.de 拼接, 那么最终会拿到一个为 1.0.0.127.bl.blocklist.de 的
//     域名, 然后对这个域名做解析, 如果解析成功, 则认为对方在黑名单内. 
// 
// 问: 为什么会有这样的机制存在? 
// 答: 在国外会有一些安全机构(或者个人), 他们会找出一些攻击过某些服务器的IP地址, 将
//     他们用上面的方式变成一个域名, 并完成解析来标记这个IP地址为坏人, 
//     以此来协助其他人, 来快速的识别一个IP地址是否可以信任. 
// 
// 问: 会有什么副作用么? 
// 答: 从原理上讲, 启用这个机制会导致每一次连接都会做IP地址检查, 所以开启之前玩家
//     输入账号密码后登录会很快的返回登录结果, 开启之后可能要比原来多花1-2秒的时间! 
//     此外, 这个机制依赖服务器本身的DNS服务器可靠性, 假设有人劫持您的DNS解析结果, 
//     让每一个请求都返回“已解析”的样子, 那么会导致登录服务器拒绝一切连接. 
use_dnsbl: no
dnsbl_servers: bl.blocklist.de, socks.dnsbl.sorbs.net
// 在这里可以查到免费的DNS黑名单服务: http://en.wikipedia.org/wiki/Comparison_of_DNS_blacklists
//==============================================================================
// DNS黑名单服务                   描述
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// bl.blocklist.de                 攻击其他服务器(或者蜜罐)的SSH、FTP、IMAP等其他服务的攻击者IP地址
// ircbl.ahbl.org                  AHBL (open proxies, compromised machines, comment spammers)
// safe.dnsbl.sorbs.net            All zones in dnsbl.sorbs.net except "recent" and "escalations"
// sbl-xbl.spamhaus.org            Spamhaus blacklist (spammers, open proxies)
// socks.dnsbl.sorbs.net           开放的SOCKS代理服务器IP地址
// tor.ahbl.org                    Current tor relay and exit nodes

// 客户端MD5指纹校验
// 若打开此选项, 那么登录服务器会校验客户端的MD5指纹
// 如果是不认识的客户端, 则禁止连接到服务器
// 提示: 您可以查看 'doc/md5_hashcheck.txt' 以便获得更详细的信息.
client_hash_check: off

// 客户端MD5指纹列表
// 只有 group_id 大于等于指定数值的玩家, 可以使用指定指纹的客户端登录游戏
// 
// 当您特殊指定一个指纹为 'disabled' 的话, 则表示 group_id 大于等于指定数值的玩家
//     可以无视客户端指纹限制, 随时都可以登录游戏(哪怕客户端不发送MD5指纹都可以登录)
// 
// 注意: 想使用此功能, 那么必须在Diff客户端的时候, 让客户端发送指纹封包
// 做法: 在使用NEMO对客户端进行Diff的时候, 需要启用 'Force Send Client Hash Packet (Experimental)' 选项
// 
// 格式: group_id, hash指纹
// 提示: 您可以查看 'doc/md5_hashcheck.txt' 以便获得更详细的信息.
// 
// 下面这个例子中, group_id大于等于  0 的玩家可使用指纹为113e195e6c051bb1cfb12a644bb084c5的客户端登录
//client_hash: 0, 113e195e6c051bb1cfb12a644bb084c5
// 
// 下面这个例子中, group_id大于等于 10 的玩家可使用指纹为cb1ea78023d337c38e8ba5124e2338ae的客户端登录
//client_hash: 10, cb1ea78023d337c38e8ba5124e2338ae
//
// 下面这个例子中, group_id大于等于 99 的玩家可无视指纹登录限制, 使用任何客户端都可以登录
//client_hash: 99, disabled

// 当程序崩溃时, 是否生成完整的崩溃转储文件 ?
//  no: 生成迷你转储文件(体积仅有30~50kb, 但记录的信息少)
// yes: 生成完整转储文件(体积等于服务器崩溃时所占用的内存大小, 记录的信息丰富)
// 
// 为了能够在程序崩溃的时候, 让开发者能够采集到足够的信息, 从而快速定位并解决问题
// 建议在磁盘空间足够的情况下, 生成“完整转储文件”
// 
// 注意: 此文件中的开关仅控制"登陆服务器"的崩溃转储文件类型
create_fulldump: yes

import: conf/inter_athena.conf
import: conf/import/login_conf.txt
